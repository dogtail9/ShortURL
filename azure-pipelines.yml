# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- feature/*

resources:
- repo: self

variables:
  system.debug: true
  resourceGroupNamePrefix: surl
  testResourceGroupName: $(resourceGroupNamePrefix)test
  productionResourceGroupName: $(resourceGroupNamePrefix)production

stages:
- stage: Build_And_Publish_Zip_Files 
  dependsOn: []
  displayName: Build And Publish As Zip
  jobs:
  - job:
    dependsOn: []
    displayName: ARM Template
    pool: 
      vmImage: 'ubuntu-latest'
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        Contents: '**/*identityserver.template.json'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: false
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: ARM
  - job: Sql
    dependsOn: []
    displayName: Create Sql Migration Script
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1.101'
      inputs:
        version: 3.1.101
    - pwsh: |
        dotnet tool install --global dotnet-ef
      displayName: Install dotnet-ef 
    - task: DotNetCoreCLI@2
      displayName: 'Build MigrationHost'
      inputs:
        projects: '**/ShortUrl.DataAccess.Sql.MigrationHost.csproj'
    - pwsh: |
        dotnet ef migrations script --startup-project $(build.sourcesDirectory)/ShortUrl.DataAccess.Sql.MigrationHost/ShortUrl.DataAccess.Sql.MigrationHost.csproj --project $(build.sourcesDirectory)/ShortUrl.DataAccess.Sql/ShortUrl.DataAccess.Sql.csproj --idempotent --no-build --output $(Build.ArtifactStagingDirectory)/create.sql
      displayName: Create Sql Script
      name: firstStep
      workingDirectory: $(build.sourcesDirectory)
      failOnStderr: false    
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Sql Script Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: Sql
  - job: IdentityServer
    dependsOn: []
    displayName: Build And Public IdentityServer
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1.101'
      inputs:
        version: 3.1.101
    - task: DotNetCoreCLI@2
      displayName: 'Build IdentityServer'
      inputs:
        projects: '**/ShortUrl.IdentityServer.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Publish IdentityServer'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/ShortUrl.IdentityServer.csproj'
        arguments: '-o $(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        Contents: '**/*.zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: IdentityServer
  - job: ManagementGui
    dependsOn: []
    displayName: Build And Public ManagementGui
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1.101'
      inputs:
        version: 3.1.101
    - task: DotNetCoreCLI@2
      displayName: 'Build ManagementGui'
      inputs:
        projects: '**/ShortUrl.ManagementGui.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Publish ManagementGui'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/ShortUrl.ManagementGui.csproj'
        arguments: '-o $(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        Contents: '**/*.zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: ManagementGui
  - job: RedirectApi
    dependsOn: []
    displayName: Build And Public ManagementGui
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1.101'
      inputs:
        version: 3.1.101
    - task: DotNetCoreCLI@2
      displayName: 'Build RedirectApi'
      inputs:
        projects: '**/ShortUrl.RedirectApi.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Publish RedirectApi'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/ShortUrl.RedirectApi.csproj'
        arguments: '-o $(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        Contents: '**/*.zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: RedirectApi
  - job: UrlManagementApi
    dependsOn: []
    displayName: Build And Public ManagementGui
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk 3.1.101'
      inputs:
        version: 3.1.101
    - task: DotNetCoreCLI@2
      displayName: 'Build UrlManagementApi'
      inputs:
        projects: '**/ShortUrl.UrlManagementApi.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Publish UrlManagementApi'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/ShortUrl.UrlManagementApi.csproj'
        arguments: '-o $(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        Contents: '**/*.zip'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: UrlManagementApi

- stage: Build_And_Push_Docker_Images
  dependsOn: []
  displayName: Build And Push Docker Images
  jobs:  
  - job: Cache
    dependsOn: []
    displayName: Build And Push Cache
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreInstaller@2
      displayName: 'Use .NET Core sdk 3.1.101'
      inputs:
        version: 3.1.101
    - pwsh: |
        dotnet tool install --global dotnet-sql-cache --version 3.1.1
      displayName: Install dotnet-sql-cache 
    - pwsh: |
        docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=P@ssw0rd' -p 1435:1433 -d --name shorturlcache mcr.microsoft.com/mssql/server:2019-GDR1-ubuntu-16.04
        Start-Sleep -Seconds 20
        docker exec shorturlcache /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "P@ssw0rd" -Q "CREATE DATABASE ShortUrlCache"
        dotnet sql-cache create "Server=localhost,1435;Database=ShortUrlCache;User Id=sa;Password=P@ssw0rd;" dbo UrlCache
        docker stop shorturlcache
        docker commit shorturlcache $(docker.repository):cache_$(Build.BuildNumber)
        docker rm shorturlcache
      displayName: Build Cache 
      name: firstStep
      workingDirectory: $(build.sourcesDirectory)
      failOnStderr: false
    - task: Docker@2
      displayName: Push Cache
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: push
        tags: 'cache_$(Build.BuildNumber)'
        addPipelineData: false
  - job: IdentityServer
    dependsOn: []
    displayName: Build And Push IdentityServer
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build IdentityServer
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: build
        Dockerfile: ShortUrl.IdentityServer/Dockerfile
        buildContext: '$(Build.SourcesDirectory)'
        tags: 'identityserver_$(Build.BuildNumber)'
        addPipelineData: false
    - task: Docker@2
      displayName: Push IdentityServer
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: push
        tags: 'identityserver_$(Build.BuildNumber)'
        addPipelineData: false
  - job: ManagementGui
    dependsOn: []
    displayName: Build And Push ManagementGui
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build ManagementGui
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: build
        Dockerfile: ShortUrl.ManagementGui/Dockerfile
        buildContext: '$(Build.SourcesDirectory)'
        tags: 'managementgui_$(Build.BuildNumber)'
        addPipelineData: false
    - task: Docker@2
      displayName: Push ManagementGui
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: push
        tags: 'managementgui_$(Build.BuildNumber)'
        addPipelineData: false
  - job: RedirectApi
    dependsOn: []
    displayName: Build And Push RedirectApi
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build RedirectApi
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: build
        Dockerfile: ShortUrl.RedirectApi/Dockerfile
        buildContext: '$(Build.SourcesDirectory)'
        tags: 'redirectapi_$(Build.BuildNumber)'
        addPipelineData: false
    - task: Docker@2
      displayName: Push RedirectApi
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: push
        tags: 'redirectapi_$(Build.BuildNumber)'
        addPipelineData: false
  - job: ManagementApi
    dependsOn: []
    displayName: Build And Push ManagementApi
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      displayName: Build ManagementApi
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: build
        Dockerfile: ShortUrl.UrlManagementApi/Dockerfile
        buildContext: '$(Build.SourcesDirectory)'
        tags: 'managementapi_$(Build.BuildNumber)'
        addPipelineData: false
    - task: Docker@2
      displayName: Push ManagementApi
      inputs:
        containerRegistry: 'Docker Hub'
        repository: $(docker.repository)
        command: push
        tags: 'managementapi_$(Build.BuildNumber)'
        addPipelineData: false

- stage: Deploy_Test
  displayName: Deploy Test
  dependsOn: Build_And_Publish_Zip_Files
  condition: succeeded('Build_And_Publish_Zip_Files')
  jobs:  
  - deployment: Deploy_ARM_Template
    displayName: Deploy ARM Template
    pool:
      vmImage: 'ubuntu-latest'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureResourceGroupDeployment@2
            displayName: 'Azure Deployment:Create Or Update Resource Group action on $(testResourceGroupName)'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              resourceGroupName: '$(testResourceGroupName)'
              location: 'North Europe'
              csmFile: '$(Pipeline.Workspace)/ARM/identityserver.template.json'
  - deployment: Deploy_SQL_Cache
    displayName: Deploy SQL Cache
    dependsOn: Deploy_ARM_Template
    pool:
      vmImage: 'ubuntu-latest'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DotNetCoreInstaller@2
            displayName: 'Use .NET Core sdk 3.1.101'
            inputs:
              version: 3.1.101
          - pwsh: |
              dotnet tool install --global dotnet-sql-cache --version 3.1.1
            displayName: Install dotnet-sql-cache 
          - pwsh: |
              dotnet sql-cache create "Server=$(testResourceGroupName)server.database.windows.net;Database=$(testResourceGroupName)cache;User Id=ShortUrl;Password=89452678532!@hKiLJUYGHHNgfgjh;" dbo $(testResourceGroupName)cache
            displayName: Create Cache 
            name: firstStep
            failOnStderr: false
  - deployment: Deploy_SQL_Migration
    displayName: Deploy SQL Migration
    dependsOn: Deploy_ARM_Template
    pool:
      vmImage: 'windows-latest'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Azure SQL SqlTask'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              ServerName: '$(testResourceGroupName)server.database.windows.net'
              DatabaseName: '$(testResourceGroupName)db'
              SqlUsername: 'ShortUrl'
              SqlPassword: '89452678532!@hKiLJUYGHHNgfgjh'
              deployType: SqlTask
              SqlFile: '$(Pipeline.Workspace)/Sql/create.sql'
  - deployment: Delpoy_Identity
    displayName: Deploy IdentityServer
    dependsOn: 
    - Deploy_SQL_Migration 
    - Deploy_SQL_Cache
    condition: succeeded('Deploy_SQL_Migration', 'Deploy_SQL_Cache')
    pool:
      vmImage: 'ubuntu-latest'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: ShortUrlIdentity'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              appType: webAppLinux
              WebAppName: $(testResourceGroupName)identity
              packageForLinux: '$(Pipeline.Workspace)/IdentityServer/ShortUrl.IdentityServer.zip'
              RuntimeStack: 'DOTNETCORE|3.0'
              StartupCommand: 'dotnet ShortUrl.IdentityServer.dll'
  - deployment: Delpoy_ManagementApi
    displayName: Deploy Management Api
    dependsOn: 
    - Deploy_SQL_Migration 
    - Deploy_SQL_Cache
    condition: succeeded('Deploy_SQL_Migration', 'Deploy_SQL_Cache')
    pool:
      vmImage: 'ubuntu-latest'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: ShortUrlManagementApi'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              appType: webAppLinux
              WebAppName: $(testResourceGroupName)managementapi
              packageForLinux: '$(Pipeline.Workspace)/UrlManagementApi/ShortUrl.UrlManagementApi.zip'
              RuntimeStack: 'DOTNETCORE|3.1'
              StartupCommand: 'dotnet ShortUrl.UrlManagementApi.dll'
  - deployment: Delpoy_ManagementGui
    displayName: Deploy Management Gui
    dependsOn: 
    - Deploy_SQL_Migration 
    - Deploy_SQL_Cache
    condition: succeeded('Deploy_SQL_Migration', 'Deploy_SQL_Cache')
    pool:
      vmImage: 'ubuntu-latest'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: ShortUrlManagementGui'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              appType: webAppLinux
              WebAppName: $(testResourceGroupName)managementgui
              packageForLinux: '$(Pipeline.Workspace)/ManagementGui/ShortUrl.ManagementGui.zip'
              RuntimeStack: 'DOTNETCORE|3.1'
              StartupCommand: 'dotnet ShortUrl.ManagementGui.dll'
  - deployment: Delpoy_RedirectApi
    displayName: Deploy Redirect Api
    dependsOn: 
    - Deploy_SQL_Migration 
    - Deploy_SQL_Cache
    condition: succeeded('Deploy_SQL_Migration', 'Deploy_SQL_Cache')
    pool:
      vmImage: 'ubuntu-latest'
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: ShortUrlRedirectApi'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              appType: webAppLinux
              WebAppName: $(testResourceGroupName)redirectapi
              packageForLinux: '$(Pipeline.Workspace)/RedirectApi/ShortUrl.RedirectApi.zip'
              RuntimeStack: 'DOTNETCORE|3.1'
              StartupCommand: 'dotnet ShortUrl.RedirectApi.dll'

- stage: Deploy_Production
  displayName: Deploy Production
  dependsOn: Deploy_Test
  condition: succeeded('Deploy_Test')
  jobs:  
  - deployment: Deploy_ARM_Template
    displayName: Deploy ARM Template
    pool:
      vmImage: 'ubuntu-latest'
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureResourceGroupDeployment@2
            displayName: 'Azure Deployment:Create Or Update Resource Group action on ShortUrl-RG'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              resourceGroupName: '$(productionResourceGroupName)'
              location: 'North Europe'
              csmFile: '$(Pipeline.Workspace)/ARM/identityserver.template.json'
  - deployment: Deploy_SQL_Cache
    displayName: Deploy SQL Cache
    dependsOn: Deploy_ARM_Template
    pool:
      vmImage: 'ubuntu-latest'
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DotNetCoreInstaller@2
            displayName: 'Use .NET Core sdk 3.1.101'
            inputs:
              version: 3.1.101
          - pwsh: |
              dotnet tool install --global dotnet-sql-cache --version 3.1.1
            displayName: Install dotnet-sql-cache 
          - pwsh: |
              dotnet sql-cache create "Server=$(productionResourceGroupName)server.database.windows.net;Database=$(productionResourceGroupName)cache;User Id=ShortUrl;Password=89452678532!@hKiLJUYGHHNgfgjh;" dbo $(productionResourceGroupName)cache
            displayName: Create Cache 
            name: firstStep
            failOnStderr: false
  - deployment: Deploy_SQL_Migration
    displayName: Deploy SQL Migration
    dependsOn: Deploy_ARM_Template
    pool:
      vmImage: 'windows-latest'
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Azure SQL SqlTask'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              ServerName: '$(productionResourceGroupName)server.database.windows.net'
              DatabaseName: '$(productionResourceGroupName)db'
              SqlUsername: 'ShortUrl'
              SqlPassword: '89452678532!@hKiLJUYGHHNgfgjh'
              deployType: SqlTask
              SqlFile: '$(Pipeline.Workspace)/Sql/create.sql'
  - deployment: Delpoy_Identity
    displayName: Deploy IdentityServer
    dependsOn: 
    - Deploy_SQL_Migration 
    - Deploy_SQL_Cache
    condition: succeeded('Deploy_SQL_Migration', 'Deploy_SQL_Cache')
    pool:
      vmImage: 'ubuntu-latest'
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: ShortUrlIdentity'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              appType: webAppLinux
              WebAppName: $(productionResourceGroupName)identity
              packageForLinux: '$(Pipeline.Workspace)/IdentityServer/ShortUrl.IdentityServer.zip'
              RuntimeStack: 'DOTNETCORE|3.0'
              StartupCommand: 'dotnet ShortUrl.IdentityServer.dll'
  - deployment: Delpoy_ManagementApi
    displayName: Deploy Management Api
    dependsOn: 
    - Deploy_SQL_Migration 
    - Deploy_SQL_Cache
    condition: succeeded('Deploy_SQL_Migration', 'Deploy_SQL_Cache')
    pool:
      vmImage: 'ubuntu-latest'
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: ShortUrlManagementApi'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              appType: webAppLinux
              WebAppName: $(productionResourceGroupName)managementapi
              packageForLinux: '$(Pipeline.Workspace)/UrlManagementApi/ShortUrl.UrlManagementApi.zip'
              RuntimeStack: 'DOTNETCORE|3.1'
              StartupCommand: 'dotnet ShortUrl.UrlManagementApi.dll'
  - deployment: Delpoy_ManagementGui
    displayName: Deploy Management Gui
    dependsOn: 
    - Deploy_SQL_Migration 
    - Deploy_SQL_Cache
    condition: succeeded('Deploy_SQL_Migration', 'Deploy_SQL_Cache')
    pool:
      vmImage: 'ubuntu-latest'
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: ShortUrlManagementGui'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              appType: webAppLinux
              WebAppName: $(productionResourceGroupName)managementgui
              packageForLinux: '$(Pipeline.Workspace)/ManagementGui/ShortUrl.ManagementGui.zip'
              RuntimeStack: 'DOTNETCORE|3.1'
              StartupCommand: 'dotnet ShortUrl.ManagementGui.dll'
  - deployment: Delpoy_RedirectApi
    displayName: Deploy Redirect Api
    dependsOn: 
    - Deploy_SQL_Migration 
    - Deploy_SQL_Cache
    condition: succeeded('Deploy_SQL_Migration', 'Deploy_SQL_Cache')
    pool:
      vmImage: 'ubuntu-latest'
    environment: Production
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Azure App Service Deploy: ShortUrlRedirectApi'
            inputs:
              azureSubscription: 'Visual Studio Enterprise (42955aa6-8ee8-4233-9e3f-882a3e5091de)'
              appType: webAppLinux
              WebAppName: $(productionResourceGroupName)redirectapi
              packageForLinux: '$(Pipeline.Workspace)/RedirectApi/ShortUrl.RedirectApi.zip'
              RuntimeStack: 'DOTNETCORE|3.1'
              StartupCommand: 'dotnet ShortUrl.RedirectApi.dll'